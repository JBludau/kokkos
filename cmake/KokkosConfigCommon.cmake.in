set(Kokkos_DEVICES @KOKKOS_ENABLED_DEVICES@)
set(Kokkos_OPTIONS @KOKKOS_ENABLED_OPTIONS@)
set(Kokkos_TPLS @KOKKOS_ENABLED_TPLS@)
set(Kokkos_ARCH @KOKKOS_ENABLED_ARCH_LIST@)
set(Kokkos_CXX_COMPILER "@CMAKE_CXX_COMPILER@")
set(Kokkos_CXX_COMPILER_ID "@KOKKOS_CXX_COMPILER_ID@")
set(Kokkos_CXX_COMPILER_VERSION "@KOKKOS_CXX_COMPILER_VERSION@")
set(Kokkos_CXX_STANDARD @KOKKOS_CXX_STANDARD@)

# Required to be a TriBITS-compliant external package
if(NOT TARGET Kokkos::all_libs)
  # CMake Error at <prefix>/lib/cmake/Kokkos/KokkosConfigCommon.cmake:10 (ADD_LIBRARY):
  #   ADD_LIBRARY cannot create ALIAS target "Kokkos::all_libs" because target
  #   "Kokkos::kokkos" is imported but not globally visible.
  if(CMAKE_VERSION VERSION_LESS "3.18")
    set_target_properties(Kokkos::kokkos PROPERTIES IMPORTED_GLOBAL ON)
  endif()
  add_library(Kokkos::all_libs ALIAS Kokkos::kokkos)
endif()

# Export Kokkos_ENABLE_<BACKEND> for each backend that was enabled.
# NOTE: "Devices" is a little bit of a misnomer here.  These are really
# backends, e.g. Kokkos_ENABLE_OPENMP, Kokkos_ENABLE_CUDA, Kokkos_ENABLE_HIP,
# or Kokkos_ENABLE_SYCL.
foreach(DEV ${Kokkos_DEVICES})
  set(Kokkos_ENABLE_${DEV} ON)
endforeach()
# Export relevant Kokkos_ENABLE<OPTION> variables, e.g.
# Kokkos_ENABLE_CUDA_RELOCATABLE_DEVICE_CODE, Kokkos_ENABLE_DEBUG, etc.
foreach(OPT ${Kokkos_OPTIONS})
  set(Kokkos_ENABLE_${OPT} ON)
endforeach()

if(Kokkos_ENABLE_CUDA)
  set(Kokkos_CUDA_ARCHITECTURES @KOKKOS_CUDA_ARCHITECTURES@)
endif()

if(Kokkos_ENABLE_HIP)
  set(Kokkos_HIP_ARCHITECTURES @KOKKOS_HIP_ARCHITECTURES@)
endif()

if(NOT Kokkos_FIND_QUIETLY)
  message(STATUS "Enabled Kokkos devices: ${Kokkos_DEVICES}")
endif()

if(Kokkos_ENABLE_CUDA)
  # If we are building CUDA, we have tricked CMake because we declare a CXX project
  # If the default C++ standard for a given compiler matches the requested
  # standard, then CMake just omits the -std flag in later versions of CMake
  # This breaks CUDA compilation (CUDA compiler can have a different default
  # -std then the underlying host compiler by itself). Setting this variable
  # forces CMake to always add the -std flag even if it thinks it doesn't need it
  set(CMAKE_CXX_STANDARD_DEFAULT 98 CACHE INTERNAL "" FORCE)
endif()

set(KOKKOS_USE_CXX_EXTENSIONS @KOKKOS_USE_CXX_EXTENSIONS@)
if(NOT DEFINED CMAKE_CXX_EXTENSIONS OR CMAKE_CXX_EXTENSIONS)
  if(NOT KOKKOS_USE_CXX_EXTENSIONS)
    message(
      WARNING "The installed Kokkos configuration does not support CXX extensions. Forcing -DCMAKE_CXX_EXTENSIONS=Off"
    )
    set(CMAKE_CXX_EXTENSIONS OFF CACHE BOOL "" FORCE)
  endif()
endif()

include(FindPackageHandleStandardArgs)

#   This function makes sure that Kokkos was built with the requested backends
#   and target architectures and generates a fatal error if it was not.
#
#   kokkos_check(
#     [DEVICES <devices>...]   # Set of backends (e.g. "OpenMP" and/or "Cuda")
#     [ARCH <archs>...]        # Target architectures (e.g. "Power9" and/or "Volta70")
#     [OPTIONS <options>...]   # Optional settings (e.g. "TUNING")
#     [TPLS <tpls>...]         # Third party libraries
#     [RETURN_VALUE <result>]  # Set a variable that indicates the result of the
#                              # check instead of a fatal error
#   )
function(kokkos_check)
  set(ALLOWED_ARGS DEVICES ARCH OPTIONS TPLS)
  cmake_parse_arguments(KOKKOS_CHECK "" "RETURN_VALUE" "${ALLOWED_ARGS}" ${ARGN})
  foreach(_arg ${KOKKOS_CHECK_UNPARSED_ARGUMENTS})
    message(SEND_ERROR "Argument '${_arg}' passed to kokkos_check() was not recognized")
  endforeach()
  # Get the list of keywords that were actually passed to the function.
  set(REQUESTED_ARGS)
  foreach(arg ${ALLOWED_ARGS})
    if(KOKKOS_CHECK_${arg})
      list(APPEND REQUESTED_ARGS ${arg})
    endif()
  endforeach()
  set(KOKKOS_CHECK_SUCCESS TRUE)
  foreach(arg ${REQUESTED_ARGS})
    # Define variables named after the required arguments that are provided by
    # the Kokkos install.
    foreach(requested ${KOKKOS_CHECK_${arg}})
      foreach(provided ${Kokkos_${arg}})
        string(TOUPPER ${requested} REQUESTED_UC)
        string(TOUPPER ${provided} PROVIDED_UC)
        if(PROVIDED_UC STREQUAL REQUESTED_UC)
          string(REPLACE ";" " " ${requested} "${KOKKOS_CHECK_${arg}}")
        endif()
      endforeach()
    endforeach()
    # Somewhat divert the CMake function below from its original purpose and
    # use it to check that there are variables defined for all required
    # arguments. Success or failure messages will be displayed but we are
    # responsible for signaling failure and skip the build system generation.
    if(KOKKOS_CHECK_RETURN_VALUE)
      set(Kokkos_${arg}_FIND_QUIETLY ON)
    endif()
    find_package_handle_standard_args("Kokkos_${arg}" DEFAULT_MSG ${KOKKOS_CHECK_${arg}})
    if(NOT Kokkos_${arg}_FOUND)
      set(KOKKOS_CHECK_SUCCESS FALSE)
    endif()
  endforeach()
  if(NOT KOKKOS_CHECK_SUCCESS AND NOT KOKKOS_CHECK_RETURN_VALUE)
    message(FATAL_ERROR "Kokkos does NOT provide all backends and/or architectures requested")
  else()
    set(${KOKKOS_CHECK_RETURN_VALUE} ${KOKKOS_CHECK_SUCCESS} PARENT_SCOPE)
  endif()
endfunction()

# A test to check whether a downstream project set the C++ compiler to NVCC or not
# this is called only when Kokkos was installed with Kokkos_ENABLE_CUDA=ON
function(kokkos_compiler_is_nvcc VAR COMPILER)
  # Check if the compiler is nvcc (which really means nvcc_wrapper).
  execute_process(
    COMMAND ${COMPILER} ${ARGN} --version
    OUTPUT_VARIABLE INTERNAL_COMPILER_VERSION
    OUTPUT_STRIP_TRAILING_WHITESPACE
    RESULT_VARIABLE RET
  )
  # something went wrong
  if(RET GREATER 0)
    set(${VAR} false PARENT_SCOPE)
  else()
    string(REPLACE "\n" " - " INTERNAL_COMPILER_VERSION_ONE_LINE ${INTERNAL_COMPILER_VERSION})
    string(FIND ${INTERNAL_COMPILER_VERSION_ONE_LINE} "nvcc" INTERNAL_COMPILER_VERSION_CONTAINS_NVCC)
    string(REGEX REPLACE "^ +" "" INTERNAL_HAVE_COMPILER_NVCC "${INTERNAL_HAVE_COMPILER_NVCC}")
    if(${INTERNAL_COMPILER_VERSION_CONTAINS_NVCC} GREATER -1)
      set(${VAR} true PARENT_SCOPE)
    else()
      set(${VAR} false PARENT_SCOPE)
    endif()
  endif()
endfunction()

# this function checks whether the current CXX compiler supports building CUDA
function(kokkos_cxx_compiler_cuda_test _VAR _COMPILER)

  file(
    WRITE ${PROJECT_BINARY_DIR}/compile_tests/compiles_cuda.cu
    "
#include <cuda.h>
#include <cstdlib>

__global__
void kernel(int sz, double* data)
{
    int _beg = blockIdx.x * blockDim.x + threadIdx.x;
    for(int i = _beg; i < sz; ++i)
        data[i] += static_cast<double>(i);
}

int main()
{
    double* data = NULL;
    int blocks = 64;
    int grids = 64;
    int ret = cudaMalloc(&data, blocks * grids * sizeof(double));
    if(ret != cudaSuccess)
        return EXIT_FAILURE;
    kernel<<<grids, blocks>>>(blocks * grids, data);
    cudaDeviceSynchronize();
    return EXIT_SUCCESS;
}
"
  )

  # save the command for debugging
  set(_COMMANDS "${_COMPILER} ${ARGN} -c ${PROJECT_BINARY_DIR}/compile_tests/compiles_cuda.cu")

  # use execute_process instead of try compile because we want to set custom compiler
  execute_process(
    COMMAND ${_COMPILER} ${ARGN} -c ${PROJECT_BINARY_DIR}/compile_tests/compiles_cuda.cu
    RESULT_VARIABLE _RET
    WORKING_DIRECTORY ${PROJECT_BINARY_DIR}/compile_tests
    TIMEOUT 15
    OUTPUT_QUIET ERROR_QUIET
  )

  if(NOT _RET EQUAL 0)
    # save the command for debugging
    set(_COMMANDS
        "${_COMMAND}\n${_COMPILER} --cuda-gpu-arch=sm_35 ${ARGN} -c ${PROJECT_BINARY_DIR}/compile_tests/compiles_cuda.cu"
    )
    # try the compile test again with clang arguments
    execute_process(
      COMMAND ${_COMPILER} --cuda-gpu-arch=sm_35 -c ${PROJECT_BINARY_DIR}/compile_tests/compiles_cuda.cu
      RESULT_VARIABLE _RET
      WORKING_DIRECTORY ${PROJECT_BINARY_DIR}/compile_tests
      TIMEOUT 15
      OUTPUT_QUIET ERROR_QUIET
    )
  endif()

  set(${_VAR}_COMMANDS "${_COMMANDS}" PARENT_SCOPE)
  set(${_VAR} ${_RET} PARENT_SCOPE)
endfunction()

# this function searches a given target recursively looking for a transitive dependency to Kokkos
#
#       FOUND_DEPENDENCY    --> output: is set to ON if a dependency to kokkos is found
#       LIBRARY_KEYWORD     --> input: LINK_LIBRARIES or INTERFACE_LINK_LIBRARIES (keyword used with get_target_properties)
#       DEPENDENT_LIBRARY   --> input: The library to search for in the target properties
#       INVESTIGATED_TARGET --> input: target to be checked for transitive dependency
#
function(kokkos_check_dependency FOUND_DEPENDENCY LIBRARY_KEYWORD DEPENDENT_LIBRARY INVESTIGATED_TARGET)
  if(TARGET ${INVESTIGATED_TARGET})
    get_target_property(target_dependencies ${INVESTIGATED_TARGET} ${LIBRARY_KEYWORD})
    if(target_dependencies)
      foreach(dependency IN LISTS target_dependencies)
        kokkos_check_dependency(depends_transitively ${LIBRARY_KEYWORD} ${DEPENDENT_LIBRARY} ${dependency})
        if(depends_transitively)
          set(transitive_dependency ON)
        endif()
      endforeach()
    endif()

    if(${DEPENDENT_LIBRARY} IN_LIST target_dependencies OR transitive_dependency)
      set(${FOUND_DEPENDENCY} ON PARENT_SCOPE)
    endif()
  endif()
endfunction()

# this function searches a given directory recursively finding all targets that link to kokkos
#
#       FOUND_COMPILE_TARGETS --> output: all found targets that link to kokkos and need our compiler
#       FOUND_LINK_TARGETS    --> output: all found targets that link to kokkos and need our linker
#       DEPENDENT_LIBRARY     --> input: The library to search for in the target properties
#       SEARCH_DIR            --> input: the root dir to start the recursion from
#
function(kokkos_get_directory_targets FOUND_COMPILE_TARGETS FOUND_LINK_TARGETS DEPENDENT_LIBRARY SEARCH_DIR)

  # recursively visit subdirs
  get_property(subdirs DIRECTORY ${SEARCH_DIR} PROPERTY SUBDIRECTORIES)
  foreach(subdir ${subdirs})
    kokkos_get_directory_targets(subdir_compile_targets subdir_link_targets ${DEPENDENT_LIBRARY} ${subdir})
    list(APPEND compile_targets ${subdir_compile_targets})
    list(APPEND link_targets ${subdir_link_targets})
  endforeach()

  #check if target compiles with or links to Kokkos::kokkos
  get_property(parent_targets DIRECTORY ${SEARCH_DIR} PROPERTY BUILDSYSTEM_TARGETS)
  foreach(target IN LISTS parent_targets)
    set(compile_dependency OFF)
    set(link_dependency OFF)
    # if a target lists Kokkos::kokkos in the libs it will have to be compiled with our settings no matter private/public/interface
    get_target_property(dependencies ${target} LINK_LIBRARIES)
    if(${DEPENDENT_LIBRARY} IN_LIST dependencies)
      set(compile_dependency ON)
    endif()

    kokkos_check_dependency(compile_dependency INTERFACE_LINK_LIBRARIES ${DEPENDENT_LIBRARY} ${target})
    kokkos_check_dependency(link_dependency LINK_LIBRARIES ${DEPENDENT_LIBRARY} ${target})
    if(compile_dependency)
      list(APPEND compile_targets ${target})
    endif()
    if(link_dependency)
      list(APPEND link_targets ${target})
    endif()
  endforeach()

  # push results out of recursive function
  set(${FOUND_COMPILE_TARGETS} ${compile_targets} PARENT_SCOPE)
  set(${FOUND_LINK_TARGETS} ${link_targets} PARENT_SCOPE)
endfunction()

# this function sets the source and target properties for all targets that link to a given library
#
#       PUBLIC          --> input: set downstream sources and targets to have a public dependency on kokkos. If not given, a private dependency is assumed
#       LIBRARY         --> input: name of the library downstream targets need to link to for this function to set the properties.
#       USE_LAUNCHER    --> input: Command for a launcher to use
#
function(kokkos_set_dependent_library_properties)
  cmake_parse_arguments(INP "PUBLIC" "LIBRARY" "USE_LAUNCHER" ${ARGN})

  if(NOT INP_LIBRARY)
    message(FATAL_ERROR "'kokkos_set_dependent_library_properties' needs a LIBRARY argument")
  endif()

  kokkos_get_directory_targets(COMPILE_TARGETS LINK_TARGETS ${INP_LIBRARY} ${PROJECT_SOURCE_DIR})

  if(INP_PUBLIC)
    if(@Kokkos_ENABLE_COMPILE_AS_CMAKE_LANGUAGE@)
      foreach(target IN LISTS COMPILE_TARGETS)
        get_target_property(target_sources ${target} SOURCES)
        get_target_property(target_dir ${target} SOURCE_DIR)
        list(FILTER target_sources INCLUDE REGEX "\\.cpp$|\\.cxx$")
        message(
          DEBUG
          "Kokkos setting language to @KOKKOS_COMPILE_LANGUAGE@ on target ${target} for sources ${target_dir}/{${target_sources}}"
        )
        foreach(source IN LISTS target_sources)
          set_property(
            SOURCE ${target_dir}/${source} TARGET_DIRECTORY ${target} PROPERTY LANGUAGE @KOKKOS_COMPILE_LANGUAGE@
          )
        endforeach()
      endforeach()
    endif()
    kokkos_set_source_and_target_properties(USE_LAUNCHER ${INP_USE_LAUNCHER} TARGET ${LINK_TARGETS})
  endif()

  kokkos_set_source_and_target_properties(USE_LAUNCHER ${INP_USE_LAUNCHER} LINK_ONLY_TARGET ${LINK_TARGETS})
endfunction()

# this function sets the source and target properties for all targets that link to a given library but deferred to the end of the CMake setup
#
#       PUBLIC          --> input: set downstream sources and targets to have a public dependency on kokkos. If not given a private dependency is assumed
#       LIBRARY         --> input: name of the library downstream targets need to link to for this function to set the properties.
#       USE_LAUNCHER    --> input: Command for a launcher to use
#
function(kokkos_defer_set_dependent_library_properties)
  cmake_parse_arguments(ARG "PUBLIC" "LIBRARY" "USE_LAUNCHER" ${ARGN})

  if(NOT ARG_LIBRARY)
    message(FATAL_ERROR "'kokkos_defer_set_dependent_library_properties' needs a LIBRARY argument")
  endif()

  if(ARG_PUBLIC)
    cmake_language(
      EVAL
      CODE
      "cmake_language(DEFER DIRECTORY ${PROJECT_SOURCE_DIR} CALL kokkos_set_dependent_library_properties PUBLIC USE_LAUNCHER ${ARG_USE_LAUNCHER} LIBRARY ${ARG_LIBRARY})"
    )
  else()
    cmake_language(
      EVAL
      CODE
      "cmake_language(DEFER DIRECTORY ${PROJECT_SOURCE_DIR} CALL kokkos_set_dependent_library_properties USE_LAUNCHER ${ARG_USE_LAUNCHER} LIBRARY ${ARG_LIBRARY})"
    )
  endif()

endfunction()

# this function sets the source and target properties that Kokkos requires
#
#       PROJECT           --> all cpp,cxx files for targets that link to kokkos in the project
#       DIRECTORY         --> all cpp,cxx files for targets that link to kokkos in given directories
#       TARGET            --> on the given targets (that need compilation and link settings)
#       LINK_ONLY_TARGET  --> on the given targets (that only need link settings)
#       SOURCE            --> on the given source files
#       Kokkos_FOUND_DIR  --> hint on where Kokkos was installed (important for CMake contexts that don't know this but depend on Kokkos)
#
function(kokkos_set_source_and_target_properties)
  cmake_parse_arguments(
    INP "PROJECT" "Kokkos_FOUND_DIR" "USE_LAUNCHER;DIRECTORY;TARGET;LINK_ONLY_TARGET;SOURCE" ${ARGN}
  )

  #if you passed a launcher, we will just take it without modification. If not we still use our launcher for CUDA if nvcc is not the global cxx compiler
  if(NOT INP_USE_LAUNCHER)
    #if nvcc is not the CXX_COMPILER we go through the launcher
    kokkos_compiler_is_nvcc(IS_NVCC ${CMAKE_CXX_COMPILER})
    if(NOT IS_NVCC)
      #if use kokkos_launch_compiler to launch nvcc_wrapper
      if(@Kokkos_ENABLE_CUDA@ AND @KOKKOS_CXX_COMPILER_ID@ STREQUAL NVIDIA
         AND NOT @Kokkos_ENABLE_COMPILE_AS_CMAKE_LANGUAGE@
      )
        if(NOT Kokkos_COMPILE_LAUNCHER)
          # find kokkos_launch_compiler
          find_program(
            Kokkos_COMPILE_LAUNCHER
            NAMES kokkos_launch_compiler
            HINTS ${INP_Kokkos_FOUND_DIR};${Kokkos_ROOT}
            PATHS ${INP_Kokkos_FOUND_DIR};${Kokkos_ROOT}
            PATH_SUFFIXES bin
          )
        endif()

        if(NOT Kokkos_COMPILE_LAUNCHER)
          message(
            FATAL_ERROR
              "Kokkos could not find 'kokkos_launch_compiler'. Please set '-DKokkos_COMPILE_LAUNCHER=/path/to/launcher' or '-DKokkos_ROOT=/path/to/install'"
          )
        endif()

        if(NOT Kokkos_NVCC_WRAPPER)
          # find nvcc_wrapper
          find_program(
            Kokkos_NVCC_WRAPPER
            NAMES nvcc_wrapper
            HINTS ${INP_Kokkos_FOUND_DIR};${Kokkos_ROOT}
            PATHS ${INP_Kokkos_FOUND_DIR};${Kokkos_ROOT}
            PATH_SUFFIXES bin
          )
        endif()
        # fatal if we can't nvcc_wrapper
        if(NOT Kokkos_NVCC_WRAPPER)
          message(
            FATAL_ERROR
              "Kokkos could not find nvcc_wrapper. Please set '-DKokkos_NVCC_WRAPPER=/path/to/nvcc_wrapper' or '-DKokkos_ROOT=/path/to/install'"
          )
        endif()

        set(INP_USE_LAUNCHER ${Kokkos_COMPILE_LAUNCHER};${Kokkos_NVCC_WRAPPER};${CMAKE_CXX_COMPILER})
      endif()
    endif()
  endif()

  # check if the requrired language is enabled
  if(@Kokkos_ENABLE_COMPILE_AS_CMAKE_LANGUAGE@)
    if(NOT DEFINED CMAKE_@KOKKOS_COMPILE_LANGUAGE@_COMPILER_LOADED)
      message(
        FATAL_ERROR
          "The used Kokkos needs @KOKKOS_COMPILE_LANGUAGE@ to be enabled to use the Kokkos_ENABLE_COMPILE_AS_CMAKE_LANGUAGE feature"
      )
    endif()
  endif()

  set(COMPILE_TARGETS ${INP_TARGET})
  set(LINK_TARGETS ${INP_TARGET};${INP_LINK_ONLY_TARGET})

  #resolve projects to directory
  if(INP_PROJECT)
    message(DEBUG "Kokkos marking directory ${PROJECT_SOURCE_DIR} to contain kokkos targets")
    list(APPEND INP_DIRECTORY ${PROJECT_SOURCE_DIR})
    unset(INP_PROJECT)
  endif()

  #set properties on directories
  foreach(directory IN LISTS INP_DIRECTORY)
    kokkos_get_directory_targets(DIRECTORY_COMPILE_TARGETS DIRECTORY_LINK_TARGETS Kokkos::kokkos ${directory})
    list(APPEND COMPILE_TARGETS ${DIRECTORY_COMPILE_TARGETS})
    list(APPEND LINK_TARGETS ${DIRECTORY_LINK_TARGETS})

    # set all cpp,cxx sources in the found targets to the correct language
    if(@Kokkos_ENABLE_COMPILE_AS_CMAKE_LANGUAGE@)
      foreach(target IN LISTS DIRECTORY_COMPILE_TARGETS)
        get_target_property(target_sources ${target} SOURCES)
        get_target_property(target_dir ${target} SOURCE_DIR)
        list(FILTER target_sources INCLUDE REGEX "\\.cpp$|\\.cxx$")
        message(
          DEBUG
          "Kokkos setting language to @KOKKOS_COMPILE_LANGUAGE@ on target ${target} for sources ${target_dir}/{${target_sources}}"
        )
        foreach(source IN LISTS target_sources)
          set_property(
            SOURCE ${target_dir}/${source} TARGET_DIRECTORY ${target} PROPERTY LANGUAGE @KOKKOS_COMPILE_LANGUAGE@
          )
        endforeach()
      endforeach()
    endif()

  endforeach()

  #set properties on sources
  foreach(source IN LISTS INP_SOURCE)
    message(DEBUG "Kokkos setting language to @KOKKOS_COMPILE_LANGUAGE@ for source ${source}")
    set_property(SOURCE ${source} PROPERTY LANGUAGE @KOKKOS_COMPILE_LANGUAGE@)
  endforeach()

  if(INP_USE_LAUNCHER)
    foreach(target IN LISTS COMPILE_TARGETS)
      message(DEBUG "Kokkos setting compiler launcher ${INP_USE_LAUNCHER} on target ${target}")
      set_property(TARGET ${target} PROPERTY @KOKKOS_COMPILE_LANGUAGE@_COMPILER_LAUNCHER ${INP_USE_LAUNCHER})
    endforeach()
  endif()

  foreach(target IN LISTS LINK_TARGETS)
    # use the language feature on targets
    if(@Kokkos_ENABLE_COMPILE_AS_CMAKE_LANGUAGE@)
      message(
        DEBUG
        "Kokkos setting @KOKKOS_COMPILE_LANGUAGE@_ARCHITECTURES and @KOKKOS_COMPILE_LANGUAGE@_STANDARD on target ${target}"
      )
      if(@Kokkos_ENABLE_CUDA@)
        set_property(TARGET ${target} PROPERTY CUDA_ARCHITECTURES @KOKKOS_CUDA_ARCHITECTURES@)
        set_property(TARGET ${target} PROPERTY CUDA_STANDARD @KOKKOS_CXX_STANDARD@)
      elseif(@Kokkos_ENABLE_HIP@)
        set_property(TARGET ${target} PROPERTY HIP_ARCHITECTURES @KOKKOS_HIP_ARCHITECTURES@)
        set_property(TARGET ${target} PROPERTY HIP_STANDARD @KOKKOS_CXX_STANDARD@)
      endif()
    endif()

    # use launcher on targets
    if(INP_USE_LAUNCHER)
      message(DEBUG "Kokkos setting linker launcher ${INP_USE_LAUNCHER} on target ${target}")
      set_property(TARGET ${target} PROPERTY @KOKKOS_COMPILE_LANGUAGE@_LINKER_LAUNCHER ${INP_USE_LAUNCHER})
    endif()

    # do nothing if the CXX compiler is capable of consuming kokkos directly
  endforeach()
endfunction()

# this function is provided to easily select which files use the same compiler as Kokkos
# when it was installed (or nvcc_wrapper):
#
#       GLOBAL      --> all files
#       TARGET      --> all files in a target
#       SOURCE      --> specific source files
#       DIRECTORY   --> all files in directory
#       PROJECT     --> all files/targets in a project/subproject
#
# Use the COMPILER argument to specify a compiler, if needed. By default, it will
# set the values to ${Kokkos_CXX_COMPILER} unless Kokkos_ENABLE_CUDA=ON and
# Kokkos_CXX_COMPILER_ID is NVIDIA, then it will set it to nvcc_wrapper
#
# Use CHECK_CUDA_COMPILES to run a check when CUDA is enabled
#
function(kokkos_compilation)
  cmake_parse_arguments(
    COMP "GLOBAL;PROJECT;CHECK_CUDA_COMPILES" "COMPILER" "DIRECTORY;TARGET;SOURCE;COMMAND_PREFIX" ${ARGN}
  )

  message(
    WARNING
      "'kokkos_compilation' is deprecated and will be removed in the future. Use `kokkos_set_source_and_target_properties` instead"
  )

  # if built w/o CUDA support, we want to basically make this a no-op
  set(_Kokkos_ENABLE_CUDA @Kokkos_ENABLE_CUDA@)

  if(CMAKE_VERSION VERSION_GREATER_EQUAL 3.17)
    set(MAYBE_CURRENT_INSTALLATION_ROOT "${CMAKE_CURRENT_FUNCTION_LIST_DIR}/../../..")
  endif()

  # search relative first and then absolute
  set(_HINTS "${MAYBE_CURRENT_INSTALLATION_ROOT}" "@CMAKE_INSTALL_PREFIX@")

  # find kokkos_launch_compiler
  find_program(
    Kokkos_COMPILE_LAUNCHER
    NAMES kokkos_launch_compiler
    HINTS ${_HINTS}
    PATHS ${_HINTS}
    PATH_SUFFIXES bin
  )

  if(NOT Kokkos_COMPILE_LAUNCHER)
    message(
      FATAL_ERROR
        "Kokkos could not find 'kokkos_launch_compiler'. Please set '-DKokkos_COMPILE_LAUNCHER=/path/to/launcher'"
    )
  endif()

  # if COMPILER was not specified, assume Kokkos_CXX_COMPILER
  if(NOT COMP_COMPILER)
    set(COMP_COMPILER ${Kokkos_CXX_COMPILER})
    if(_Kokkos_ENABLE_CUDA AND Kokkos_CXX_COMPILER_ID STREQUAL NVIDIA)
      # find nvcc_wrapper
      find_program(
        Kokkos_NVCC_WRAPPER
        NAMES nvcc_wrapper
        HINTS ${_HINTS}
        PATHS ${_HINTS}
        PATH_SUFFIXES bin
      )
      # fatal if we can't nvcc_wrapper
      if(NOT Kokkos_NVCC_WRAPPER)
        message(
          FATAL_ERROR "Kokkos could not find nvcc_wrapper. Please set '-DKokkos_NVCC_WRAPPER=/path/to/nvcc_wrapper'"
        )
      endif()
      set(COMP_COMPILER ${Kokkos_NVCC_WRAPPER})
    endif()
  endif()

  # check that the original compiler still exists!
  if(NOT EXISTS ${COMP_COMPILER})
    message(FATAL_ERROR "Kokkos could not find original compiler: '${COMP_COMPILER}'")
  endif()

  # try to ensure that compiling cuda code works!
  if(_Kokkos_ENABLE_CUDA AND COMP_CHECK_CUDA_COMPILES)

    # this may fail if kokkos_compiler launcher was used during install
    kokkos_cxx_compiler_cuda_test(_COMPILES_CUDA ${Kokkos_COMPILE_LAUNCHER} ${COMP_COMPILER} ${CMAKE_CXX_COMPILER})

    # if above failed, throw an error
    if(NOT _COMPILES_CUDA)
      message(FATAL_ERROR "kokkos_cxx_compiler_cuda_test failed! Test commands:\n${_COMPILES_CUDA_COMMANDS}")
    endif()
  endif()

  if(COMP_COMMAND_PREFIX)
    set(_PREFIX "${COMP_COMMAND_PREFIX}")
    string(REPLACE ";" " " _PREFIX "${COMP_COMMAND_PREFIX}")
    set(Kokkos_COMPILER_LAUNCHER "${_PREFIX} ${Kokkos_COMPILE_LAUNCHER}")
  endif()

  if(COMP_GLOBAL)
    # if global, don't bother setting others
    set_property(
      GLOBAL PROPERTY RULE_LAUNCH_COMPILE "${Kokkos_COMPILE_LAUNCHER} ${COMP_COMPILER} ${CMAKE_CXX_COMPILER}"
    )
    set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK "${Kokkos_COMPILE_LAUNCHER} ${COMP_COMPILER} ${CMAKE_CXX_COMPILER}")
  else()
    foreach(_TYPE PROJECT DIRECTORY TARGET SOURCE)
      # make project/subproject scoping easy, e.g. KokkosCompilation(PROJECT) after project(...)
      if("${_TYPE}" STREQUAL "PROJECT" AND COMP_${_TYPE})
        list(APPEND COMP_DIRECTORY ${PROJECT_SOURCE_DIR})
        unset(COMP_${_TYPE})
      endif()
      # set the properties if defined
      if(COMP_${_TYPE})
        # MESSAGE(STATUS "Using ${COMP_COMPILER} :: ${_TYPE} :: ${COMP_${_TYPE}}")
        set_property(
          ${_TYPE} ${COMP_${_TYPE}} PROPERTY RULE_LAUNCH_COMPILE
                                             "${Kokkos_COMPILE_LAUNCHER} ${COMP_COMPILER} ${CMAKE_CXX_COMPILER}"
        )
        set_property(
          ${_TYPE} ${COMP_${_TYPE}} PROPERTY RULE_LAUNCH_LINK
                                             "${Kokkos_COMPILE_LAUNCHER} ${COMP_COMPILER} ${CMAKE_CXX_COMPILER}"
        )
      endif()
    endforeach()
  endif()
endfunction()
