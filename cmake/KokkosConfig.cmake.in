if(@Kokkos_ENABLE_DEPRECATED_BUILD_STRATEGY@)
  cmake_minimum_required(VERSION 3.16)
else()
  cmake_minimum_required(VERSION 3.21)
endif()
# No need for policy push/pop. CMake also manages a new entry for scripts
# loaded by include() and find_package() commands except when invoked with
# the NO_POLICY_SCOPE option
# CMP0057 + NEW -> IN_LIST operator in IF(...)
cmake_policy(SET CMP0057 NEW)

# Compute paths
@PACKAGE_INIT@

#Find dependencies
include(CMakeFindDependencyMacro)

#This needs to go above the KokkosTargets in case
#the Kokkos targets depend in some way on the TPL imports
@KOKKOS_TPL_EXPORTS@

get_filename_component(Kokkos_CMAKE_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
include("${Kokkos_CMAKE_DIR}/KokkosTargets.cmake")
include("${Kokkos_CMAKE_DIR}/KokkosConfigCommon.cmake")
set(Kokkos_FOUND_INSTALL_DIR ${Kokkos_CMAKE_DIR}/../../..)
unset(Kokkos_CMAKE_DIR)

# components deprecation message
if(NOT @Kokkos_ENABLE_DEPRECATED_BUILD_STRATEGY@)
  if("launch_compiler" IN_LIST Kokkos_FIND_COMPONENTS)
    message(
      FATAL_ERROR
        "'launch_compiler' is deprecated and will be removed in the future. To use it set Kokkos_ENABLE_DEPRECATED_BUILD_STRATEGY=ON"
    )
  elseif("separable_compilation" IN_LIST Kokkos_FIND_COMPONENTS)
    message(
      FATAL_ERROR
        "'separable_compilation' is deprecated and will be removed in the future. To use it set Kokkos_ENABLE_DEPRECATED_BUILD_STRATEGY=ON"
    )
  endif()
endif()

# deprecated build strategy with components
if(@Kokkos_ENABLE_DEPRECATED_BUILD_STRATEGY@)
  if("launch_compiler" IN_LIST Kokkos_FIND_COMPONENTS AND "separable_compilation" IN_LIST Kokkos_FIND_COMPONENTS)
    message(
      STATUS "'launch_compiler' implies global redirection of targets depending on Kokkos to appropriate compiler."
    )
    message(
      STATUS
        "'separable_compilation' implies explicitly defining where redirection occurs via 'kokkos_compilation(PROJECT|TARGET|SOURCE|DIRECTORY ...)'"
    )
    message(FATAL_ERROR "Conflicting COMPONENTS: 'launch_compiler' and 'separable_compilation'")
  endif()

  if("launch_compiler" IN_LIST Kokkos_FIND_COMPONENTS)
    #
    # if find_package(Kokkos COMPONENTS launch_compiler) then rely on the
    # RULE_LAUNCH_COMPILE and RULE_LAUNCH_LINK to always redirect to the
    # appropriate compiler for Kokkos
    #

    message(
      STATUS
        "kokkos_launch_compiler is enabled globally. C++ compiler commands with -DKOKKOS_DEPENDENCE will be redirected to the appropriate compiler for Kokkos"
    )
    kokkos_compilation(GLOBAL CHECK_CUDA_COMPILES)

  elseif(@Kokkos_ENABLE_CUDA@ AND NOT @KOKKOS_COMPILE_LANGUAGE@ STREQUAL CUDA AND NOT "separable_compilation" IN_LIST
                                                                                  Kokkos_FIND_COMPONENTS
  )
    #
    # if CUDA was enabled, the compilation language was not set to CUDA, and separable compilation was not
    # specified, then set the RULE_LAUNCH_COMPILE and RULE_LAUNCH_LINK globally and
    # kokkos_launch_compiler will re-direct to the compiler used to compile CUDA code during installation.
    # kokkos_launch_compiler will re-direct if ${CMAKE_CXX_COMPILER} and -DKOKKOS_DEPENDENCE is present,
    # otherwise, the original command will be executed
    #

    # run test to see if CMAKE_CXX_COMPILER=nvcc_wrapper
    kokkos_compiler_is_nvcc(IS_NVCC ${CMAKE_CXX_COMPILER})

    # if not nvcc_wrapper and Kokkos_LAUNCH_COMPILER was not set to OFF
    if(NOT IS_NVCC AND (NOT DEFINED Kokkos_LAUNCH_COMPILER OR Kokkos_LAUNCH_COMPILER))
      message(
        STATUS
          "kokkos_launch_compiler is enabled globally. C++ compiler commands with -DKOKKOS_DEPENDENCE will be redirected to the appropriate compiler for Kokkos"
      )
      kokkos_compilation(GLOBAL)
    endif()

    # be mindful of the environment, pollution is bad
    unset(IS_NVCC)
  endif()
  # end of deprecated build strategy with components
  # new cmake strategy
else()
  # if not there already, add list of excluded dirs into cache
  set(Kokkos_EXCLUDE_BUILD_DIRS
      ""
      CACHE
        STRING
        "List of directories Kokkos that are excluded from Kokkos setting build properties on source and target properties via a deferred call"
  )

  #To run the following block only once even if Kokkos is found in different subscopes, we guard it by a cache variable.
  #Cache vars defined by find_package getting here are already in a valid state thus we can not use them here.
  #Thus a new cache variable is defined in the Kokkos namespace
  if(NOT DEFINED CACHE{Kokkos_SET_GLOBAL_BUILD_PROPERTIES})
    set(Kokkos_SET_GLOBAL_BUILD_PROPERTIES ON
        CACHE STRING "Whether Kokkos traverses all targets and sets source and target properties"
    )
    cmake_language(
      DEFER
      DIRECTORY
      ${CMAKE_SOURCE_DIR}
      CALL
      message
      STATUS
      "Kokkos setting target and source properties"
    )
    # defer a call to set source and target properties of all dirs-Kokkos_EXCLUDE_BUILD_DIR after the complete project has been processed by CMake
    cmake_language(
      EVAL
      CODE
      "
    cmake_language(DEFER DIRECTORY ${CMAKE_SOURCE_DIR} CALL kokkos_set_source_and_target_properties GLOBAL Kokkos_FOUND_DIR ${Kokkos_FOUND_INSTALL_DIR})
    "
    )
    cmake_language(
      DEFER
      DIRECTORY
      ${CMAKE_SOURCE_DIR}
      CALL
      message
      STATUS
      "Kokkos setting target and source properties ... done"
    )
  endif()
endif()

set(Kokkos_COMPILE_LANGUAGE @KOKKOS_COMPILE_LANGUAGE@)
unset(Kokkos_FOUND_INSTALL_DIR)
