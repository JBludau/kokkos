if(@Kokkos_ENABLE_DEPRECATED_BUILD_STRATEGY@)
  cmake_minimum_required(VERSION 3.16)
else()
  cmake_minimum_required(VERSION 3.21)
endif()

# No need for policy push/pop. CMake also manages a new entry for scripts
# loaded by include() and find_package() commands except when invoked with
# the NO_POLICY_SCOPE option
# CMP0057 + NEW -> IN_LIST operator in IF(...)
cmake_policy(SET CMP0057 NEW)

# Compute paths
@PACKAGE_INIT@

#Find dependencies
include(CMakeFindDependencyMacro)

#This needs to go above the KokkosTargets in case
#the Kokkos targets depend in some way on the TPL imports
@KOKKOS_TPL_EXPORTS@

get_filename_component(Kokkos_CMAKE_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
include("${Kokkos_CMAKE_DIR}/KokkosTargets.cmake")
include("${Kokkos_CMAKE_DIR}/KokkosConfigCommon.cmake")
set(Kokkos_FOUND_INSTALL_DIR ${Kokkos_CMAKE_DIR}/../../..)
unset(Kokkos_CMAKE_DIR)

if(@Kokkos_ENABLE_DEPRECATED_BUILD_STRATEGY@)
  # check for conflicts
  if("launch_compiler" IN_LIST Kokkos_FIND_COMPONENTS AND "separable_compilation" IN_LIST Kokkos_FIND_COMPONENTS)
    message(
      STATUS "'launch_compiler' implies global redirection of targets depending on Kokkos to appropriate compiler."
    )
    message(
      STATUS
        "'separable_compilation' implies explicitly defining where redirection occurs via 'kokkos_compilation(PROJECT|TARGET|SOURCE|DIRECTORY ...)'"
    )
    message(FATAL_ERROR "Conflicting COMPONENTS: 'launch_compiler' and 'separable_compilation'")
  endif()
endif()

if(NOT @Kokkos_ENABLE_COMPILE_AS_CMAKE_LANGUAGE)
  if(NOT KOKKOS_CXX_COMPILER_IS_COMPATIBLE)
    #we compile a small test program using kokkos to check if the flags and ABI the CXX compiler uses is compatible with the library
    kokkos_cxx_compiler_is_compatible(RESULT KOKKOS_COMPILER_IS_COMPATIBLE)
    set(KOKKOS_CXX_COMPILER_IS_COMPATIBLE ${KOKKOS_COMPILER_IS_COMPATIBLE}
        CACHE STRING "CMAKE_CXX_COMPILER can compile Kokkos code"
    )

    if(@Kokkos_ENABLE_DEPRECATED_BUILD_STRATEGY@)
      if((@KOKKOS_ENABLE_CUDA@ AND NOT KOKKOS_CXX_COMPILER_IS_COMPATIBLE) OR "launch_compiler" IN_LIST
                                                                             Kokkos_FIND_COMPONENTS
      )
        #
        # if find_package(Kokkos COMPONENTS launch_compiler) then rely on the
        # RULE_LAUNCH_COMPILE and RULE_LAUNCH_LINK to always redirect to the
        # appropriate compiler for Kokkos
        #

        message(
          STATUS
            "kokkos_launch_compiler is enabled globally. C++ compiler commands with -DKOKKOS_DEPENDENCE will be redirected to the appropriate compiler for Kokkos"
        )
        kokkos_compilation(GLOBAL)

      else()
        if(NOT KOKKOS_CXX_COMPILER_IS_COMPATIBLE)
          message(
            WARNING
              "Kokkos can not compile a simple test program with the given CXX compiler ${CMAKE_CXX_COMPILER}. This might be due to incompatible flags or ABI."
          )
        endif()
      endif()
      #new build strategy
    else()
      #To run the following block only once even if Kokkos is found in different subscopes, we guard it by a cache variable.
      #Cache vars defined by find_package getting here are already in a valid state thus we can not use them here.
      #Thus a new cache variable is defined in the Kokkos namespace
      if(NOT DEFINED CACHE{Kokkos_HAS_SET_GLOBAL_BUILD_PROPERTIES})
        set(Kokkos_HAS_SET_GLOBAL_BUILD_PROPERTIES ON
            CACHE BOOL "Whether Kokkos traversed all targets and sets source and target properties"
        )
        #status message of begin
        cmake_language(
          DEFER
          DIRECTORY
          ${CMAKE_SOURCE_DIR}
          CALL
          message
          STATUS
          "Kokkos setting target and source properties"
        )
        # defer a call to set source and target properties of all dirs excluding Kokkos_EXCLUDE_BUILD_DIR after the complete project has been processed by CMake
        cmake_language(
          EVAL
          CODE
          "
      cmake_language(DEFER DIRECTORY ${CMAKE_SOURCE_DIR} CALL kokkos_set_target_properties GLOBAL Kokkos_FOUND_DIR ${Kokkos_FOUND_INSTALL_DIR})
      "
        )
        cmake_language(
          DEFER
          DIRECTORY
          ${CMAKE_SOURCE_DIR}
          CALL
          message
          STATUS
          "Kokkos setting target and source properties ... done"
        )
      endif()
    endif()
  endif()
endif()

set(Kokkos_COMPILE_LANGUAGE @KOKKOS_COMPILE_LANGUAGE@)
unset(Kokkos_FOUND_INSTALL_DIR)
