# No need for policy push/pop. CMake also manages a new entry for scripts
# loaded by include() and find_package() commands except when invoked with
# the NO_POLICY_SCOPE option
# CMP0057 + NEW -> IN_LIST operator in IF(...)
cmake_policy(SET CMP0057 NEW)

# Compute paths
@PACKAGE_INIT@

#Find dependencies
include(CMakeFindDependencyMacro)

#This needs to go above the KokkosTargets in case
#the Kokkos targets depend in some way on the TPL imports
@KOKKOS_TPL_EXPORTS@

get_filename_component(Kokkos_CMAKE_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
include("${Kokkos_CMAKE_DIR}/KokkosTargets.cmake")
include("${Kokkos_CMAKE_DIR}/KokkosConfigCommon.cmake")
unset(Kokkos_CMAKE_DIR)

if(NOT DEFINED Kokkos_GLOBAL_COMPILATION)
  set(Kokkos_GLOBAL_COMPILATION true)
endif()

if(NOT DEFINED Kokkos_FORCE_COMPILER_LAUNCHER)
  set(Kokkos_FORCE_COMPILER_LAUNCHER false)
endif()

if(Kokkos_GLOBAL_COMPILATION)
  # If nvcc is not the CXX_COMPILER we go through the launcher
  if(@Kokkos_ENABLE_CUDA@ AND NOT @KOKKOS_COMPILE_LANGUAGE@ STREQUAL CUDA)
    kokkos_compiler_is_nvcc(IS_NVCC ${CMAKE_CXX_COMPILER})
    if(NOT IS_NVCC)
      message(
        STATUS
          "kokkos_launch_compiler is enabled globally. C++ compiler commands with -DKOKKOS_DEPENDENCE will be redirected to the appropriate compiler for Kokkos"
      )
      kokkos_compilation(GLOBAL)
    endif()
  endif()

  # If users request the compiler launcher we use it globally
  if(Kokkos_FORCE_COMPILER_LAUNCHER)
    message(
      STATUS
        "kokkos_launch_compiler is enabled globally. C++ compiler commands with -DKOKKOS_DEPENDENCE will be redirected to the appropriate compiler for Kokkos"
    )
    kokkos_compilation(GLOBAL)
  endif()
endif()

set(Kokkos_COMPILE_LANGUAGE @KOKKOS_COMPILE_LANGUAGE@)
